#!/usr/bin/env python

import os

from nicelogcat import main

import sys
from colorama import Fore, Back, Style


if len(sys.argv) == 1:
    print("Must supply arguments to nicelogcat")
    sys.exit(1)

config_dir = sys.argv[1]
curr_dir_path = os.path.dirname(os.path.realpath(__file__))
base_config_dir = os.path.join(curr_dir_path, "configs")
base_config_files = os.listdir(base_config_dir)
error_color = Fore.RED
info_color = Fore.GREEN
guide_color = Fore.YELLOW

custom_arg_supplied = not config_dir.startswith('--')
is_config_dir = custom_arg_supplied and os.path.isdir(config_dir)

how_to_config = "\n\n"
how_to_config += guide_color + "To specify a config use nicelogcat [config_dir] --config.file [config_name]" + Style.RESET_ALL
how_to_config += "\n\n"
how_to_config += "If config_dir is not specified (without --) it will search configs in: " + base_config_dir

if is_config_dir:
    sys.argv.pop(1)
    try:
        config_file_load_key_idx = sys.argv.index('--config.file')
    except:
        print()
        print(error_color + "You must supply a --config.file [config_file]" + Style.RESET_ALL)
        print(how_to_config)
        sys.exit(1)

    config_file_idx = config_file_load_key_idx + 1

    config_file_basename = sys.argv[config_file_idx]
    if not os.path.exists(config_file_basename):
        config_file = os.path.join(config_dir, config_file_basename)
        if not os.path.exists(config_file):
            config_file = config_file + ".json"
        if not os.path.exists(config_file):
            config_file = os.path.join(base_config_dir, config_file_basename)
        if not os.path.exists(config_file):
            config_file = config_file + ".json"

    print(Fore.GREEN + f"Config_file:" + Style.RESET_ALL)
    print(Fore.YELLOW + f"\t{config_file}" + Style.RESET_ALL)
    sys.argv[config_file_idx] = config_file

    try:
        main()
    except Exception as e:
        print()
        print(error_color + str(e) + Style.RESET_ALL)
        print()
        print(info_color + "Did you mean one of these configs?\n" + Style.RESET_ALL)
        config_dir_files = os.listdir(os.path.join(config_dir))
        for f in config_dir_files + base_config_files:
            print(info_color + f + Style.RESET_ALL)
        print(how_to_config)

else:
    if custom_arg_supplied:
        print()
        print(error_color + "Could not find config_dir: " +
              Style.RESET_ALL + info_color + config_dir + Style.RESET_ALL)
        print(how_to_config)
    else:
        main()
